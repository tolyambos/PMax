generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  clerkId       String       @unique
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  role          Role         @default(USER)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  assets        Asset[]
  bulkVideos    BulkVideo[]
  permissions   Permission[]
  projects      Project[]
  sessions      Session[]
}

model Permission {
  id                String   @id @default(cuid())
  userId            String
  canCreateProjects Boolean  @default(false)
  canUploadAssets   Boolean  @default(true)
  maxProjects       Int      @default(10)
  maxAssetStorage   BigInt   @default(1073741824)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id                         String      @id @default(cuid())
  name                       String
  description                String?
  userId                     String
  createdAt                  DateTime    @default(now())
  updatedAt                  DateTime    @updatedAt
  format                     String      @default("9:16")
  duration                   Int         @default(15)
  thumbnail                  String?
  isTemplate                 Boolean     @default(false)
  videoUrl                   String?
  published                  Boolean     @default(false)
  prompt                     String?
  brandLogoUrl               String?
  dataSourceType             String?
  dataSourceUrl              String?
  defaultAnimationProvider   String?
  defaultDuration            Int?
  defaultFormats             String[]    @default([])
  defaultImageStyle          String?
  defaultSceneCount          Int?
  defaultVideoStyle          String?
  logoHeight                 Int?
  logoPosition               String?
  logoWidth                  Int?
  projectType                String?     @default("standard")
  uploadedFileUrl            String?
  defaultImageStylePreset    String?
  defaultCameraFixed         Boolean?    @default(false)
  defaultUseEndImage         Boolean?    @default(false)
  defaultAnimationPromptMode String?     @default("ai")
  defaultAnimationTemplate   String?
  bulkVideos                 BulkVideo[]
  user                       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  scenes                     Scene[]
}

model Scene {
  id                 String    @id @default(cuid())
  projectId          String
  order              Int
  duration           Int       @default(3)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  imageUrl           String?
  videoUrl           String?
  prompt             String?
  animationPrompt    String?
  animationStatus    String?
  animate            Boolean   @default(false)
  useAnimatedVersion Boolean?
  backgroundHistory  Json?
  animationHistory   Json?
  elements           Element[]
  project            Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Element {
  id        String   @id @default(cuid())
  sceneId   String
  type      String
  content   String?
  x         Float    @default(0)
  y         Float    @default(0)
  width     Float?
  height    Float?
  rotation  Float    @default(0)
  opacity   Float    @default(1.0)
  zIndex    Int      @default(0)
  url       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  assetId   String?
  asset     Asset?   @relation(fields: [assetId], references: [id])
  scene     Scene    @relation(fields: [sceneId], references: [id], onDelete: Cascade)
}

model Asset {
  id        String    @id @default(cuid())
  userId    String
  name      String
  type      String
  url       String
  thumbnail String?
  tags      String[]
  duration  Int?
  fileSize  Int?
  mimeType  String?
  bucket    String?
  s3Key     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  elements  Element[]
}

model BulkVideo {
  id                        String           @id @default(cuid())
  projectId                 String
  userId                    String
  rowIndex                  Int
  textContent               String
  productImageUrl           String?
  customImageStyle          String?
  customFormats             String[]         @default([])
  customAnimationProvider   String?
  customDuration            Int?
  customSceneCount          Int?
  status                    String           @default("pending")
  error                     String?
  createdAt                 DateTime         @default(now())
  updatedAt                 DateTime         @updatedAt
  customCameraFixed         Boolean?
  customUseEndImage         Boolean?
  customAnimationPromptMode String?
  customAnimationTemplate   String?
  project                   Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user                      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  scenes                    BulkVideoScene[]
  renderedVideos            RenderedVideo[]
}

model BulkVideoScene {
  id                String                  @id @default(cuid())
  bulkVideoId       String
  order             Int
  prompt            String
  imageUrl          String?
  animationUrl      String?
  animationProvider String?
  status            String                  @default("pending")
  error             String?
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  animationPrompt   String?
  bulkVideo         BulkVideo               @relation(fields: [bulkVideoId], references: [id], onDelete: Cascade)
  animationVersions SceneAnimationVersion[]
  imageVersions     SceneImageVersion[]
}

model RenderedVideo {
  id          String    @id @default(cuid())
  bulkVideoId String
  format      String
  url         String?
  status      String    @default("pending")
  error       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bulkVideo   BulkVideo @relation(fields: [bulkVideoId], references: [id], onDelete: Cascade)
}

model SceneImageVersion {
  id             String         @id @default(cuid())
  sceneId        String
  version        Int            @default(1)
  prompt         String
  imageUrl       String
  isActive       Boolean        @default(false)
  generationTime Int?
  qualityScore   Float?
  createdAt      DateTime       @default(now())
  scene          BulkVideoScene @relation(fields: [sceneId], references: [id], onDelete: Cascade)

  @@unique([sceneId, version])
  @@index([sceneId, isActive])
}

model SceneAnimationVersion {
  id                String         @id @default(cuid())
  sceneId           String
  version           Int            @default(1)
  animationPrompt   String
  animationUrl      String
  animationProvider String
  imageUrl          String
  isActive          Boolean        @default(false)
  generationTime    Int?
  duration          Int?
  createdAt         DateTime       @default(now())
  scene             BulkVideoScene @relation(fields: [sceneId], references: [id], onDelete: Cascade)

  @@unique([sceneId, version])
  @@index([sceneId, isActive])
}

enum Role {
  USER
  ADMIN
}
