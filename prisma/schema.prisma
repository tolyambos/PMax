generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  assets        Asset[]
  projects      Project[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  format      String   @default("9:16")
  duration    Int      @default(15)
  thumbnail   String?
  isTemplate  Boolean  @default(false)
  videoUrl    String?
  published   Boolean  @default(false)
  prompt      String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  scenes      Scene[]
}

model Scene {
  id                 String    @id @default(cuid())
  projectId          String
  order              Int
  duration           Int       @default(3)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  imageUrl           String?
  videoUrl           String?
  prompt             String?
  animationPrompt    String?
  animationStatus    String?
  animate            Boolean   @default(false)
  useAnimatedVersion Boolean?  // User's choice for export: true = use animation, false = use static
  backgroundHistory  Json?     // Store background edit history as JSON
  animationHistory   Json?     // Store animation history as JSON
  elements           Element[]
  project            Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Element {
  id        String   @id @default(cuid())
  sceneId   String
  type      String
  content   String?
  x         Float    @default(0)
  y         Float    @default(0)
  width     Float?
  height    Float?
  rotation  Float    @default(0)
  opacity   Float    @default(1.0)
  zIndex    Int      @default(0)
  url       String?  // URL for direct image/video/audio element URLs
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  assetId   String?
  asset     Asset?   @relation(fields: [assetId], references: [id])
  scene     Scene    @relation(fields: [sceneId], references: [id], onDelete: Cascade)
}

model Asset {
  id        String    @id @default(cuid())
  userId    String
  name      String
  type      String
  url       String
  thumbnail String?
  tags      String[]
  duration  Int?
  fileSize  Int?      // File size in bytes
  mimeType  String?   // MIME type of the file
  bucket    String?   // S3 bucket name
  s3Key     String?   // S3 object key
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  elements  Element[]
}
